datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  password      String?
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  bio           String?
  furnitureListings FurnitureListing[]  // Relation to furniture listings
  businessUsers     BusinessUser[]      // Relation to business users
  apartmentListings ApartmentListing[]  // Relation to apartment listings
  conversations1 Conversation[] @relation("UserConversations1") // relations for user1
  conversations2 Conversation[] @relation("UserConversations2") // relations for user2
  messagesSent   Message[]      @relation("UserMessagesSent")   // for sender
  messagesReceived Message[]    @relation("UserMessagesReceived") // for receiver
}

model FurnitureListing {
  id          Int     @id @default(autoincrement())
  user_id     String  // Foreign key reference to User
  price       Int
  description String
  condition   String  @db.VarChar(20)
  colors      Json?
  pics        Bytes[]
  // Foreign key relation to users
  user        User    @relation(fields: [user_id], references: [id])

  @@map("furniture_listing")
}

model BusinessUser {
  id      Int  @id @default(autoincrement())
  user_id String
  rating  Int

  // Foreign key relation to users
  user    User @relation(fields: [user_id], references: [id])

  @@map("business_user")
}

model ApartmentListing {
  id          Int      @id @default(autoincrement())
  user_id     String
  price       Int
  location    String
  amenities   String
  description String?
  availability String
  policies    String?
  pics        Bytes[]
  bedrooms    Int?
  bathrooms   Int?

  // Foreign key relation to users
  user        User @relation(fields: [user_id], references: [id])

  @@map("apartment_listing")
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Conversation {
  id        Int       @id @default(autoincrement())
  user1_id  String
  user2_id  String
  created_at DateTime @default(now())
  messages   Message[] @relation("ConversationMessages")

  // Foreign key relations
  user1     User      @relation("UserConversations1", fields: [user1_id], references: [id])
  user2     User      @relation("UserConversations2", fields: [user2_id], references: [id])
}

model Message {
  id             Int       @id @default(autoincrement())
  sender_id      String
  receiver_id    String
  content        String
  timestamp      DateTime  @default(now())
  conversation_id Int?

  // Foreign key relations
  sender        User      @relation("UserMessagesSent", fields: [sender_id], references: [id])
  receiver      User      @relation("UserMessagesReceived", fields: [receiver_id], references: [id])
  conversation  Conversation? @relation("ConversationMessages", fields: [conversation_id], references: [id])
}

